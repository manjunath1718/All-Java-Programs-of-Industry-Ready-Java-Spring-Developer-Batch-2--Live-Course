package com.telusko.config;

import java.util.HashMap;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import jakarta.persistence.EntityManagerFactory;
@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(entityManagerFactoryRef = "db2EntityManager"
,transactionManagerRef = "db2TransactionManager",basePackages = "com.telusko.repo.pd")
public class Db2Config {

	@Bean
	@ConfigurationProperties(prefix = "db2.datasource")
	public DataSource db2DataSource(){
		
		return DataSourceBuilder.create().build();		
	}
	
	@Bean
	public LocalContainerEntityManagerFactoryBean db2EntityManager(EntityManagerFactoryBuilder emfb){
		
		HashMap<String,Object> properties=new HashMap<>();
		properties.put("hibernate.ddl-auto", "update");
		properties.put("show-sql", "true");
		properties.put("hibernate.format_sql", "true");
		properties.put("database-platform", "org.hibernate.dialect.H2Dialect");
				
		return emfb.dataSource(db1DataSource()).packages("com.telusko.model.customer")
				.properties(properties).persistenceUnit("t_db").build();
				
	}
	
	
	//TransactionManagement
	@Bean
	public PlatformTransactionManager db1TransactionManager
	(@Qualifier("db1EntityManager") EntityManagerFactory factory){
		
		return new JpaTransactionManager(factory);
	}
}
